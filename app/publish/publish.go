package publish

import (
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"

	"github.com/lbryio/lbrytv/app/proxy"
	"github.com/lbryio/lbrytv/app/users"
	"github.com/lbryio/lbrytv/config"
	"github.com/lbryio/lbrytv/internal/monitor"

	"github.com/gorilla/mux"
)

// FileFieldName refers to the POST field containing file upload
const FileFieldName = "file"

// JSONRPCFieldName is a name of the POST field containing JSONRPC request accompanying the uploaded file
const JSONRPCFieldName = "json_payload"

const fileNameParam = "file_path"

var logger = monitor.NewModuleLogger("publish")

// Publisher is responsible for sending data to lbrynet
// and should take file path, account ID and client query as a slice of bytes.
type Publisher interface {
	Publish(string, string, []byte) []byte
}

// LbrynetPublisher is an implementation of SDK publisher.
type LbrynetPublisher struct {
	*proxy.Service
}

// UploadHandler glues HTTP uploads to the Publisher.
type UploadHandler struct {
	Publisher  Publisher
	UploadPath string
}

type UploadOpts struct {
	Path         string
	Publisher    Publisher
	ProxyService *proxy.Service
}

// NewUploadHandler returns a HTTP upload handler object.
func NewUploadHandler(opts UploadOpts) (*UploadHandler, error) {
	var (
		publisher  Publisher
		uploadPath string
	)
	if opts.ProxyService != nil {
		publisher = &LbrynetPublisher{Service: opts.ProxyService}
	} else if opts.Publisher != nil {
		publisher = opts.Publisher
	} else {
		return nil, errors.New("need either a ProxyService or a Publisher instance")
	}

	if opts.Path == "" {
		uploadPath = config.GetPublishSourceDir()
	} else {
		uploadPath = opts.Path
	}
	return &UploadHandler{
		Publisher:  publisher,
		UploadPath: uploadPath,
	}, nil
}

// Publish takes a file path, account ID and client JSON-RPC query,
// patches the query and sends it to the SDK for processing.
// Resulting response is then returned back as a slice of bytes.
func (p *LbrynetPublisher) Publish(filePath, accountID string, rawQuery []byte) []byte {
	c := p.Service.NewCaller()
	c.SetAccountID(accountID)
	c.SetPreprocessor(func(q *proxy.Query) {
		params := q.ParamsAsMap()
		params[fileNameParam] = filePath
		q.Request.Params = params
	})
	r := c.Call(rawQuery)
	return r
}

// Handle is where HTTP upload is handled and passed on to Publisher.
// It should be wrapped with users.Authenticator.Wrap before it can be used
// in a mux.Router.
func (h UploadHandler) Handle(w http.ResponseWriter, r *users.AuthenticatedRequest) {
	w.WriteHeader(http.StatusOK)
	if !r.IsAuthenticated() {
		var authErr Error
		if r.AuthFailed() {
			authErr = NewAuthError(r.AuthError)
		} else {
			authErr = ErrUnauthorized
		}
		w.Write(authErr.AsBytes())
		return
	}

	f, err := h.saveFile(r)
	if err != nil {
		w.Write(NewInternalError(err).AsBytes())
		return
	}

	response := h.Publisher.Publish(f.Name(), r.AccountID, []byte(r.FormValue(JSONRPCFieldName)))
	w.Write(response)
}

// CanHandle checks if http.Request contains POSTed data in an accepted format.
// Supposed to be used in gorilla mux router MatcherFunc.
func (h UploadHandler) CanHandle(r *http.Request, _ *mux.RouteMatch) bool {
	_, _, err := r.FormFile(FileFieldName)
	payload := r.FormValue(JSONRPCFieldName)
	return err != http.ErrMissingFile && payload != ""
}

// createFile opens an empty file for writing inside the account's designated folder.
// The final file path looks like `/upload_path/{account_id}/{random}_filename.ext`,
// where `account_id` is local SDK account ID and `random` is a random string generated by ioutil.
func (h UploadHandler) createFile(accountID string, origFilename string) (*os.File, error) {
	path, err := h.preparePath(accountID)
	if err != nil {
		return nil, err
	}
	return ioutil.TempFile(path, fmt.Sprintf("*_%v", origFilename))
}

func (h UploadHandler) preparePath(accountID string) (string, error) {
	path := path.Join(h.UploadPath, accountID)
	err := os.MkdirAll(path, os.ModePerm)
	return path, err
}

func (h UploadHandler) saveFile(r *users.AuthenticatedRequest) (*os.File, error) {
	log := logger.LogF(monitor.F{"account_id": r.AccountID})
	file, header, err := r.FormFile(FileFieldName)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	f, err := h.createFile(r.AccountID, header.Filename)
	if err != nil {
		return nil, err
	}
	log.Infof("processing uploaded file %v", header.Filename)

	numWritten, err := io.Copy(f, file)
	if err != nil {
		return nil, err
	}
	log.Infof("saved uploaded file %v (%v bytes written)", f.Name(), numWritten)

	if err := f.Close(); err != nil {
		return nil, err
	}
	return f, nil
}
